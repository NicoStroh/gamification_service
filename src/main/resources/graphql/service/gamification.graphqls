# schema file of the microservice

# define data types, queries and mutations
# this can be done in a separate files as long as they are in this folder and
# end with .graphqls

enum DominantPlayerType {
  None
  Achiever
  Explorer
  Socializer
  Killer
}

type PlayerType {
  userUUID: UUID!
  achieverPercentage: Int!
  explorerPercentage: Int!
  socializerPercentage: Int!
  killerPercentage: Int!
}


type Badge {
  badgeUUID: UUID!
  name: String!
  description: String
  passingPercentage: Int!
  quizUUID: UUID
  flashCardSetUUID: UUID
}

type UserBadge {
  userBadgeUUID: UUID!
  userUUID: UUID!
  badgeUUID: UUID!
  achieved: Boolean!
}

type Query {
  getCoursesUserBadges(courseUUID: UUID!, userUUID: UUID!): [UserBadge!]!
  usersDominantPlayerType(userUUID: UUID!): DominantPlayerType!


  # True if dominant playertype is achiever
  userCanSeeBadges(userUUID: UUID!): PlayerType!
  # True if dominant playertype is explorer
  userCanSeeQuests(userUUID: UUID!): PlayerType!
  # True if dominant playertype is killer
  userCanSeeScoreboard(userUUID: UUID!): PlayerType!

  userBadges(userUUID: UUID!): [UserBadge!]
  achievedBadges(userUUID: UUID!): [UserBadge!]
  badgesByQuiz(quizUUID: UUID!): [Badge!]
  badgesByFlashCardSet(flashCardSetUUID: UUID!): [Badge!]
}

type Mutation {
  addCourse(courseUUID: UUID!): String!
  addUserToCourse(userUUID: UUID!, courseUUID: UUID!): String!
  createOrUpdatePlayerType(userUUID: UUID!, achieverPercentage: Int!, explorerPercentage: Int!, socializerPercentage: Int!, killerPercentage: Int!): PlayerType!

  markBadgesAsAchievedIfPassedQuiz(userUUID: UUID!, quizUUID: UUID!, correctAnswers: Int!, totalAnswers: Int!): [UserBadge!]!
  markBadgesAsAchievedIfPassedFlashCardSet(userUUID: UUID!, flashCardSetUUID: UUID!, correctAnswers: Int!, totalAnswers: Int!): [UserBadge!]!
  createBadgesForQuiz(quizUUID: UUID!, name: String!, description: String, courseUUID: UUID!): [Badge!]!
  createBadgesForFlashCardSet(flashCardSetUUID: UUID!, name: String!, description: String, courseUUID: UUID!): [Badge!]!


  assignBadgeToUser(userUUID: UUID!, badgeUUID: UUID!): UserBadge!
  markBadgeAsAchieved(userUUID: UUID!, badgeUUID: UUID!): UserBadge!
}