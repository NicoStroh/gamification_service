# schema file of the microservice

# define data types, queries and mutations
# this can be done in a separate files as long as they are in this folder and
# end with .graphqls

type ShortBartleTestResultEntity {
  userHasTakenTest: Boolean!
  achieverPercentage: Int!
  explorerPercentage: Int!
  socializerPercentage: Int!
  killerPercentage: Int!
}

type PlayerTypeTestQuestion {
  id: ID!
  text: String!
  option0: String!
  option1: String!
  selectedOption: Boolean!
}

enum DominantPlayerType {
  None
  Achiever
  Explorer
  Socializer
  Killer
}

type UserBadge {
  userBadgeUUID: UUID!
  userUUID: UUID!
  badgeUUID: UUID!
  achieved: Boolean!
  description: String
  passingPercentage: Int!
}

type Quest {
  questUUID: UUID!
  quizUUID: UUID
  flashCardSetUUID: UUID
  finished: Boolean!
  description: String!
  level: Int!
}

type UserQuestChain {
  userQuestChainUUID: UUID!
  quests: [Quest!]!
  questChainUUID: UUID!
  userUUID: UUID!
  userLevel: Int!
  finished: Boolean!
}

type Query {
  # Gets the users badges for the course
  getCoursesUserBadges(courseUUID: UUID!, userUUID: UUID!): [UserBadge!]!
  # Gets the current quest of the user for the course
  getCurrentUserQuest(userUUID: UUID!, courseUUID: UUID!): Quest!
  # Gets the whole questchain of the user for the course
  getUserQuestChain(userUUID: UUID!, courseUUID: UUID!): UserQuestChain!

  # Get test questions
  test: [PlayerTypeTestQuestion!]!
  # Has the user taken the playertype test?
  userHasTakenTest(userUUID: UUID!): Boolean!
  # Gets the dominant player type of the current user
  usersDominantPlayerType(userUUID: UUID!): DominantPlayerType!
}

type Mutation {
  # Add course to gamification database
  addCourse(courseUUID: UUID!, lecturerUUID: UUID!): String!
  # Add user to course in gamification database
  addUserToCourse(userUUID: UUID!, courseUUID: UUID!): String!

  # Creates gamification elements (badges / quests) for quiz / flashcardset
  createFlashCardSet(flashCardSetUUID: UUID!, name: String!, courseUUID: UUID!): String!
  createQuiz(quizUUID: UUID!, name: String!, courseUUID: UUID!): String!

  # Deletes gamification elements of the course
  deleteBadgesAndQuestsOfCourse(courseUUID: UUID!): String!
  # Deletes gamification elements for quiz / flashcardset
  deleteBadgesAndQuestOfFlashCardSet(flashcardSetUUID: UUID!, courseUUID: UUID!): String!
  deleteBadgesAndQuestOfQuiz(quizUUID: UUID!, courseUUID: UUID!): String!

  # Test evaluation
  evaluateTest(userUUID: UUID!): ShortBartleTestResultEntity!

  # Submit result to gamification service to check if gamification element was achieved
  finishFlashCardSet(userUUID: UUID!, courseUUID: UUID!, flashCardSetUUID: UUID!, correctAnswers: Int!, totalAnswers: Int!): String!
  finishQuiz(userUUID: UUID!, courseUUID: UUID!, quizUUID: UUID!, correctAnswers: Int!, totalAnswers: Int!): String!

  # Removes the user from the course in the gamification database
  removeUserFromCourse(userUUID: UUID!, courseUUID: UUID!): String!

  # Submit the answer for a question of the bartle test
  submitAnswer(questionId: Int!, answer: Boolean!): String!
}